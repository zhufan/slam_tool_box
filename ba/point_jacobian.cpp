/*
 * Academic License - for use in teaching, academic research, and meeting
 * course requirements at degree granting institutions only.  Not for
 * government, commercial, or other organizational use.
 *
 * point_jacobian.cpp
 *
 * Code generation for function 'point_jacobian'
 *
 */

/* Include files */
#include "rt_nonfinite.h"
#include "point_jacobian.h"
#include "pose_jacobian.h"

/* Function Definitions */
void point_jacobian(const double in1[3], const double in2[3], const double in3[4],
                    const double in4[9], const double in5[3], const double in6[3],
                    double b_point_jacobian[6])
{
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t16;
  double t18;
  double t20;
  double b_t20[6];
  int i0;
  int i1;

  /* POINT_JACOBIAN */
  /*     POINT_JACOBIAN = POINT_JACOBIAN(IN1,IN2,IN3,IN4,IN5,IN6) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.1. */
  /*     10-Jun-2018 12:33:23 */
  t4 = in4[2] * in6[0];
  t5 = in4[5] * in6[1];
  t6 = in4[8] * in6[2];
  t7 = in4[0] * in6[0];
  t8 = in4[3] * in6[1];
  t9 = in4[6] * in6[2];
  t10 = ((in5[0] + t7) + t8) + t9;
  t11 = in4[1] * in6[0];
  t12 = in4[4] * in6[1];
  t13 = in4[7] * in6[2];
  t14 = ((in5[1] + t11) + t12) + t13;
  t16 = (((((in2[2] + in5[2]) + t4) + t5) + t6) + in1[0] * t14) - in1[1] * t10;
  t18 = (in4[2] + in1[0] * in4[1]) - in1[1] * in4[0];
  t20 = 1.0 / t16;
  t4 = ((in5[2] + t4) + t5) + t6;
  t5 = in3[2] * t16 + in3[0] * ((((((in2[0] + in5[0]) + t7) + t8) + t9) + in1[1]
    * t4) - in1[2] * t14);
  t6 = (in4[5] + in1[0] * in4[4]) - in1[1] * in4[3];
  t7 = 1.0 / (t16 * t16);
  t8 = (in4[8] + in1[0] * in4[7]) - in1[1] * in4[6];
  t4 = in3[3] * t16 + in3[1] * ((((((in2[1] + in5[1]) + t11) + t12) + t13) +
    in1[2] * t10) - in1[0] * t4);
  b_t20[0] = t20 * (in3[0] * ((in4[0] - in1[2] * in4[1]) + in1[1] * in4[2]) +
                    in3[2] * t18) - t18 * t5 * t7;
  b_t20[1] = t20 * (in3[1] * ((in4[1] + in1[2] * in4[0]) - in1[0] * in4[2]) +
                    in3[3] * t18) - t18 * t7 * t4;
  b_t20[2] = t20 * (in3[0] * ((in4[3] - in1[2] * in4[4]) + in1[1] * in4[5]) +
                    in3[2] * t6) - t5 * t6 * t7;
  b_t20[3] = t20 * (in3[1] * ((in4[4] + in1[2] * in4[3]) - in1[0] * in4[5]) +
                    in3[3] * t6) - t6 * t7 * t4;
  b_t20[4] = t20 * (in3[0] * ((in4[6] - in1[2] * in4[7]) + in1[1] * in4[8]) +
                    in3[2] * t8) - t5 * t7 * t8;
  b_t20[5] = t20 * (in3[1] * ((in4[7] + in1[2] * in4[6]) - in1[0] * in4[8]) +
                    in3[3] * t8) - t7 * t8 * t4;
  for (i0 = 0; i0 < 3; i0++) {
    for (i1 = 0; i1 < 2; i1++) {
      b_point_jacobian[i1 + (i0 << 1)] = b_t20[i1 + (i0 << 1)];
    }
  }
}

/* End of code generation (point_jacobian.cpp) */
